<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension="" #>
//TODO Merge string info arrays into a single structure
//TODO Automate generation of typeVectorConstructorArguments
<#	var typeSizes = new int[] {32}; 
	var vectorSizes = new int[] {128, 256}; #>
#ifndef VECTOR_H
#define VECTOR_H
#include <array>
#include <cstdint>
#include <intrin.h>
#include <type_traits>

template <typename T, uint_fast16_t X>
class Vector
{
	friend struct VectorHelpers;

	__m128i vector_128_{};
	__m256i vector_256_{};

	//TODO Generate automatically?
	Vector(__m128i vector) : vector_128_(vector)
	{
	}

	Vector(__m256i vector) : vector_256_(vector)
	{
	}

public:
	// Constructors
	Vector(T value);

	explicit Vector(std::array<T, X / (8 * sizeof(T))> values);

	template<class ...T2, std::enable_if_t<sizeof...(T2) == X / (8 * sizeof(T)) && std::conjunction_v<std::is_same<T, T2>...>, int> = 0>
	explicit Vector(T2... args) : Vector(std::array<T, sizeof...(T2)>{std::forward<T2>(args)...})
	{
	}

	Vector<T, X> static Blend(Vector<T, X> comparision, Vector<T, X> falseValue, Vector<T, X> trueValue);

	// Assignment Operators
	Vector<T, X>& operator+=(const Vector<T, X>& rhs);

	// Comparision Operators
	Vector<T, X> operator>(const Vector<T, X>& vector2) const;
};

//TODO Move into struct?
<#	for (int i = 0; i < vectorSizes.Length; i++)
	{
		//Required variables
		int vectorSize = vectorSizes[i];

		for (int j = 0; j < typeSizes.Length; j++)
		{ 
			//Required variables
			int typeSize = typeSizes[j];
			
			//Niceties
			string typeName = "int" + typeSize + "_t", typeVectorName = "Vector<" + typeName + ", " + vectorSize + ">"; #>
#pragma region <#= typeVectorName #>
// Constructors
template <> <#= typeVectorName #>::Vector(<#= typeName #> value);
template <> <#= typeVectorName #>::Vector(std::array<<#= typeName#>, <#= vectorSize / typeSize #>> values);

std::ostream& operator<<(std::ostream& stream, const <#= typeVectorName #>& vector);

<#= typeVectorName #> Blend(<#= typeVectorName #> comparision, <#= typeVectorName #> falseValue, <#= typeVectorName #> trueValue);

// Assignment Operators
template <> <#= typeVectorName #>& <#= typeVectorName #>::operator+=(const <#= typeVectorName #>& rhs);

// Comparision Operators
template <> <#= typeVectorName #> <#= typeVectorName #>::operator>(const <#= typeVectorName #>& vector2) const;
#pragma endregion

<#		}
	} #>
#endif //VECTOR_H