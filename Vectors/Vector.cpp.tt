<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension="" #>
//TODO Merge string info arrays into a single structure
//TODO Automate generation of typeVectorConstructorArguments
<#	var typeSizes = new int[] {32}; 
	var vectorSizes = new int[] {128, 256};

	var typeVectorSetArguments = new string[,] {{"values[0], values[1], values[2], values[3]"}, {"values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7]"}};

	var vectorSimdPrefixes = new string[] {"mm", "mm256"};
	var typeSimdSuffixes = new string[] {"32"}; #>
#include <sstream>
#include <string>
#include "Vector.h"

struct VectorHelpers
{
	//Vector ToString Functions
	//TODO Check if these can be merged, doubt it though given use of vector_{128, 256}_, only works if GetInternal{128, 256} can be merged as well
	template <typename T>
	static std::string ToString128i(const Vector<T, 128> vector)
	{
		std::stringstream sstr;
		T values[16 / sizeof(T)];
		std::memcpy(values, &vector.vector_128_, sizeof(values));

		for (T v : values)
		{
			sstr << v << " ";
		}

		return sstr.str();
	}

	template <typename T>
	static std::string ToString256i(const Vector<T, 256> vector) 
	{
		std::stringstream sstr;
		T values[32 / sizeof(T)];
		std::memcpy(values, &vector.vector_256_, sizeof(values));

		for (T v : values)
		{
			sstr << v << " ";
		}

		return sstr.str();
	}

	//TODO Generate automatically?
	template <typename T>
	static __m128i GetInternal128i(const Vector<T, 128> vector)
	{
		return vector.vector_128_;
	}

	template <typename T>
	static __m256i GetInternal256i(const Vector<T, 256> vector)
	{
		return vector.vector_256_;
	}

	template <typename T>
	static Vector<T, 128> GetVector128i(const __m128i vector)
	{
		return vector;
	}

	template <typename T>
	static Vector<T, 256> GetVector256i(const __m256i vector)
	{
		return vector;
	}
};

<#	for (int i = 0; i < vectorSizes.Length; i++)
	{
		//Required variables
		int vectorSize = vectorSizes[i];
		string vectorSimdPrefix = vectorSimdPrefixes[i];

		//Niceties
		string vectorVariableName = "vector_" + vectorSize + "_";

		for (int j = 0; j < typeSizes.Length; j++)
		{ 
			//Required variables
			int typeSize = typeSizes[j];
			string typeSimdSuffix = typeSimdSuffixes[j], typeVectorSetArgument = typeVectorSetArguments[i,j];
			
			//Niceties
			string typeName = "int" + typeSize + "_t", typeVectorName = "Vector<" + typeName + ", " + vectorSize + ">"; #>
#pragma region <#= typeVectorName #>
// Constructors
template <>
<#= typeVectorName #>::Vector(const <#= typeName #> value) : <#= vectorVariableName #>(_<#= vectorSimdPrefix #>_set1_epi<#= typeSimdSuffix #>(value))
{
}

template <>
<#= typeVectorName #>::Vector(const std::array<<#= typeName #>, <#= vectorSize / typeSize #>> values) : <#= vectorVariableName #>(_<#= vectorSimdPrefix #>_setr_epi<#= typeSimdSuffix #>(<#= typeVectorSetArgument #>))
{
}

//TODO Fix for floating point types
std::ostream& operator<<(std::ostream& stream, const <#= typeVectorName #>& vector)
{
	return stream << VectorHelpers::ToString<#= vectorSize #>i(vector);
}

//TODO Fix for floating point types
<#= typeVectorName #> Blend(const <#= typeVectorName #> comparision, const <#= typeVectorName #> falseValue, const <#= typeVectorName #> trueValue)
{
	return VectorHelpers::GetVector<#= vectorSize #>i<<#= typeName #>>(_<#= vectorSimdPrefix #>_blendv_epi8(VectorHelpers::GetInternal<#= vectorSize #>i(falseValue), VectorHelpers::GetInternal<#= vectorSize #>i(trueValue), VectorHelpers::GetInternal<#= vectorSize #>i(comparision)));
}

// Assignment Operators
template <>
<#= typeVectorName #>& <#= typeVectorName #>::operator+=(const <#= typeVectorName #>& rhs)
{
	this-><#= vectorVariableName #> = _<#= vectorSimdPrefix #>_add_epi<#= typeSize #>(this-><#= vectorVariableName #>, rhs.<#= vectorVariableName #>);
	return *this;
}

// Comparision Operators
template <>
<#= typeVectorName #> <#= typeVectorName #>::operator>(const <#= typeVectorName #>& vector2) const
{
	return _<#= vectorSimdPrefix #>_cmpgt_epi<#= typeSize #>(this-><#= vectorVariableName #>, vector2.<#= vectorVariableName #>);
}
#pragma endregion

<#		}
	} #>