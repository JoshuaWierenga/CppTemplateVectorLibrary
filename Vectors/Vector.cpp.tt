<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension="" #>
//TODO Merge string info arrays into a single structure
//TODO Automate generation of typeVectorConstructorArguments
<#	var typeSizes = new int[] {32}; 
	var vectorSizes = new int[] {128, 256};

	var typeVectorSetArguments = new string[,] {{"values[0], values[1], values[2], values[3]"}, {"values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7]"}};

	var vectorSimdPrefixes = new string[] {"mm", "mm256"};
	var typeSimdSuffixes = new string[] {"32"}; #>
#include "Vector.h"

<#	for (int i = 0; i < vectorSizes.Length; i++)
	{
		//Required variables
		int vectorSize = vectorSizes[i];
		string vectorSimdPrefix = vectorSimdPrefixes[i];

		//Niceties
		string vectorVariableName = "vector_" + vectorSize + "_";

		for (int j = 0; j < typeSizes.Length; j++)
		{ 
			//Required variables
			int typeSize = typeSizes[j];
			string typeSimdSuffix = typeSimdSuffixes[j], typeVectorSetArgument = typeVectorSetArguments[i,j];
			
			//Niceties
			string typeName = "int" + typeSize + "_t", typeVectorName = "Vector<" + typeName + ", " + vectorSize + ">"; #>
#pragma region <#= typeVectorName #>

// Constructors
template <>
<#= typeVectorName #>::Vector(const <#= typeName #> value) : <#= vectorVariableName #>(_<#= vectorSimdPrefix #>_set1_epi<#= typeSimdSuffix #>(value))
{
}

template <>
<#= typeVectorName #>::Vector(const std::array<<#= typeName #>, <#= vectorSize / typeSize #>> values) : <#= vectorVariableName #>(_<#= vectorSimdPrefix #>_setr_epi<#= typeSimdSuffix #>(<#= typeVectorSetArgument #>))
{
}

// Assignment Operators
template <>
<#= typeVectorName #>& <#= typeVectorName #>::operator+=(const <#= typeVectorName #>& rhs)
{
	this-><#= vectorVariableName #> = _<#= vectorSimdPrefix #>_add_epi<#= typeSize #>(this-><#= vectorVariableName #>, rhs.<#= vectorVariableName #>);
	return *this;
}

// Comparision Operators
template <>
<#= typeVectorName #> <#= typeVectorName #>::operator>(const <#= typeVectorName #>& vector2) const
{
	return _<#= vectorSimdPrefix #>_cmpgt_epi<#= typeSize #>(this-><#= vectorVariableName #>, vector2.<#= vectorVariableName #>);
}
#pragma endregion

<#		}
	} #>